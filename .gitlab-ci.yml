image: tomcat:9-jdk8-openjdk-slim-buster

variables:
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"

cache:
  paths:
    - .m2/repository/
    - .local/

stages:
  - test
  - build

before_script:
  - env
  - which java
  - java -version
  - DEBIAN_FRONTEND=noninteractive apt update && apt upgrade -y
  - DEBIAN_FRONTEND=noninteractive apt install -y maven

verify_java:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: $CI_COMMIT_BRANCH
  stage: test
  script:
    - mvn $MAVEN_CLI_OPTS clean verify
    - mvn $MAVEN_CLI_OPTS clean test-compile

checkstyle:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: $CI_COMMIT_BRANCH
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS clean checkstyle:checkstyle'

integration_test:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  script:
    - if [ ! -f ".local/apache-jmeter-5.1.1.tgz" ]; then mkdir .local && wget "https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.1.1.tgz" -O .local/apache-jmeter-5.1.1.tgz; fi
    - tar xf .local/apache-jmeter-5.1.1.tgz
    - cd integration-tests
    - bash ../apache-jmeter-5.1.1/bin/jmeter.sh -n -t RIESGOS-integration-tests.jmx -o jmeter-report -l jmeter-log.txt -e
    - cat jmeter-log.txt
    - if [ "$(fgrep -c 'Test failed' jmeter-log.txt)" != "0" ]; then false; else true; fi
  artifacts:
    name: jmeter-report
    paths:
      - ${CI_PROJECT_DIR}/integration-tests/jmeter-report

dockerbuild_latest:
  image: docker:20.10.12
  stage: build
  before_script: []
  cache: {}
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: $CI_COMMIT_BRANCH
  tags:
    - group
  script:
    - docker build -t riesgos-wps:latest -f assistance/Dockerfile .

    # push latest image to Docker Hub
    - docker tag riesgos-wps:latest gfzriesgos/riesgos-wps:latest
    - docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWORD}
    - docker push gfzriesgos/riesgos-wps:latest

    # push latest image to GitLab Container Registry
    - docker tag riesgos-wps:latest git.gfz-potsdam.de:5000/id2/riesgos/gfz-riesgos-wps-repository:latest
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push git.gfz-potsdam.de:5000/id2/riesgos/gfz-riesgos-wps-repository:latest

dockerbuild_tagged:
  image: docker:20.10.12
  stage: build
  before_script: []
  cache: {}
  tags:
    - group
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: $CI_COMMIT_TAG
  script:
    - docker build -t riesgos-wps:$CI_COMMIT_TAG -f assistance/Dockerfile .

    # push image to Docker Hub
    - docker tag riesgos-wps:$CI_COMMIT_TAG gfzriesgos/riesgos-wps:$CI_COMMIT_TAG
    - docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWORD}
    - docker push gfzriesgos/riesgos-wps:$CI_COMMIT_TAG

    # push image to GitLab Container Registry
    - docker tag riesgos-wps:$CI_COMMIT_TAG git.gfz-potsdam.de:5000/id2/riesgos/gfz-riesgos-wps-repository:$CI_COMMIT_TAG
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push git.gfz-potsdam.de:5000/id2/riesgos/gfz-riesgos-wps-repository:$CI_COMMIT_TAG
